akka {
  loggers = ["de.heikoseeberger.akkalog4j.Log4jLogger"]
  logging-filter = "de.heikoseeberger.akkalog4j.Log4jLoggingFilter"
  log-dead-letters = off
  actor.warn-about-java-serializer-usage = off

  http.parsing.max-content-length = 1m
}

sueca-http-server {
  akka = ${akka}
  submissions-time-limit = "3000-12-31T00:00:00.000Z"
  final-leaderboard = false
  redirect-to-https = false
}

sueca-runner {
  akka = ${akka}
  runners-per-node = 2
  tournament {
    target-rounds = 8
    initial-delay = 1m
    run-interval = 1m
    auto-play = true
  }
  validator {
    initial-delay = 1m
    run-interval = 1m
  }
}

sueca-runner-master = ${sueca-runner}
sueca-runner-master {
  akka {
    actor.provider = "cluster"
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        hostname = ${?HOST}
        hostname = ${?RUNNER_MASTER_HOST}
        port = 2560
        port = ${?RUNNER_MASTER_PORT}
        bind-hostname = "0.0.0.0"
      }
    }
    cluster.seed-nodes = ["akka.tcp://WorkerSystem@"${sueca-runner-master.akka.remote.netty.tcp.hostname}":"${sueca-runner-master.akka.remote.netty.tcp.port}]
  }
}

sueca-runner-worker {
  akka = ${akka}
  akka {
    actor.provider = "cluster"
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        hostname = ${?HOST}
        port = 2552
        port = ${?RUNNER_WORKER_PORT}
        bind-hostname = "0.0.0.0"
      }
    }
    cluster.seed-nodes = ["akka.tcp://WorkerSystem@"${sueca-runner-master.akka.remote.netty.tcp.hostname}":"${sueca-runner-master.akka.remote.netty.tcp.port}]
  }
}
